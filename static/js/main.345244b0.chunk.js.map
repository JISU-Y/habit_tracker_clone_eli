{"version":3,"sources":["components/Habit.jsx","components/HabitAddForm.jsx","components/Habits.jsx","components/Navbar.jsx","App.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","createRef","inputRef","onSubmit","e","preventDefault","current","value","onAdd","ref","type","placeholder","Habits","handleAdd","habits","map","id","onReset","Component","Navbar","totalCount","App","state","newHabits","el","setState","filter","item","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.345244b0.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\"\r\nimport \"@fortawesome/fontawesome-free/js/all.js\"\r\n\r\nexport default class Habit extends PureComponent {\r\n  componentDidMount() {\r\n    // mount 될 때\r\n    console.log(`habit: ${this.props.habit.name} mount`)\r\n  }\r\n  componentWillUnmount() {\r\n    // unmount 없어지기 직전 호출\r\n    console.log(`habit: ${this.props.habit.name} will unmount`)\r\n  }\r\n\r\n  handleIncrement = () => {\r\n    // props로 넘어온 함수에다가 인자만 전달\r\n    this.props.onIncrement(this.props.habit)\r\n  }\r\n\r\n  handleDecrement = () => {\r\n    this.props.onDecrement(this.props.habit)\r\n  }\r\n  handleDelete = () => {\r\n    this.props.onDelete(this.props.habit)\r\n  }\r\n\r\n  render() {\r\n    const { name, count } = this.props.habit\r\n    console.log(`habit : ${name}`)\r\n    return (\r\n      <li className=\"habit\">\r\n        <span className=\"habit-name\">{name}</span>\r\n        <span className=\"habit-count\">{count}</span>\r\n        <button className=\"habit-button habit-increase\" onClick={this.handleIncrement}>\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        <button className=\"habit-button habit-decrease\" onClick={this.handleDecrement}>\r\n          <i className=\"fas fa-minus-square\"></i>\r\n        </button>\r\n        <button className=\"habit-button habit-delete\" onClick={this.handleDelete}>\r\n          <i className=\"fas fa-trash\"></i>\r\n        </button>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n","import React, { PureComponent, createRef, memo } from \"react\"\r\n\r\n// function component (함수형 컴포넌트) / rsi\r\n// memo는 pureComponent 같은 것\r\nconst HabitAddForm = memo((props) => {\r\n  const formRef = createRef()\r\n  const inputRef = createRef() // createRef로 inputRef 멤버 변수 정의\r\n\r\n  const onSubmit = (e) => {\r\n    // submit 이벤트가 발생하면 다른 페이지로 이동하거나\r\n    // 데이터를 가져와서 렌더가 보통 되기 때문에\r\n    // 화면이 렌더링된다. 따라서 그걸 막으려면 preventDefault 써줘야 한다.\r\n    e.preventDefault()\r\n    console.log()\r\n    const name = inputRef.current.value\r\n    // name이 있으면(undefined나 null이 아니면) add할 수 있게 인자 넘겨줌\r\n    name && props.onAdd(name) // Habits 컴포넌트에서 온 아이(handleAdd)\r\n    inputRef.current.value = \"\" // input 초기화\r\n    // form으로 이것도 됨\r\n    // this.formRef.current.reset()\r\n  }\r\n  return (\r\n    <form className=\"add-form\" onSubmit={onSubmit} ref={formRef}>\r\n      <input type=\"text\" className=\"add-input\" placeholder=\"Habit\" ref={inputRef} />\r\n      <button className=\"add-button\" type=\"submit\">\r\n        Add\r\n      </button>\r\n    </form>\r\n  )\r\n})\r\n\r\nexport default HabitAddForm\r\n\r\n// 클래스형\r\n// // PureComponent를 상속받으면 불필요한 렌더가 없어진다\r\n// // shouldComponentUpdate() 함수가 내장되어 있어\r\n// // 이전의 prop과 현재의 state를 비교(얇은 비교;안의 내용이 아니라 오브젝트의 변화만 없으면 같은 것으로 간주)하여\r\n// // 업데이트가 필요하면 true, 아니면 false를 리턴하여 render함수 실행여부를 결정한다.\r\n// // 따라서 Component를 썻을 때와 렌더링이 덜 나게 될 수 있다.\r\n// export default class HabitAddForm extends PureComponent {\r\n//   formRef = createRef()\r\n//   inputRef = createRef() // createRef로 inputRef 멤버 변수 정의\r\n\r\n//   onSubmit = (e) => {\r\n//     // submit 이벤트가 발생하면 다른 페이지로 이동하거나\r\n//     // 데이터를 가져와서 렌더가 보통 되기 때문에\r\n//     // 화면이 렌더링된다. 따라서 그걸 막으려면 preventDefault 써줘야 한다.\r\n//     e.preventDefault()\r\n//     console.log()\r\n//     const name = this.inputRef.current.value\r\n//     // name이 있으면(undefined나 null이 아니면) add할 수 있게 인자 넘겨줌\r\n//     name && this.props.onAdd(name) // Habits 컴포넌트에서 온 아이(handleAdd)\r\n//     this.inputRef.current.value = \"\" // input 초기화\r\n//     // form으로 이것도 됨\r\n//     // this.formRef.current.reset()\r\n//   }\r\n//   render() {\r\n//     console.log(\"HabitAddForm\")\r\n\r\n//     return (\r\n//       <form className=\"add-form\" onSubmit={this.onSubmit} ref={this.formRef}>\r\n//         <input type=\"text\" className=\"add-input\" placeholder=\"Habit\" ref={this.inputRef} />\r\n//         <button className=\"add-button\" type=\"submit\">\r\n//           Add\r\n//         </button>\r\n//       </form>\r\n//     )\r\n//   }\r\n// }\r\n","import React, { Component } from \"react\"\r\nimport Habit from \"./Habit\"\r\nimport HabitAddForm from \"./HabitAddForm\"\r\n\r\nexport default class Habits extends Component {\r\n  componentDidMount() {\r\n    //\r\n  }\r\n  // 클래스형에서 멤버 변수는 딱 한 번 만들어진다.\r\n\r\n  handleIncrement = (habit) => {\r\n    this.props.onIncrement(habit)\r\n  }\r\n\r\n  handleDecrement = (habit) => {\r\n    this.props.onDecrement(habit)\r\n  }\r\n\r\n  handleDelete = (habit) => {\r\n    this.props.onDelete(habit)\r\n  }\r\n\r\n  handleAdd = (name) => {\r\n    this.props.onAdd(name)\r\n  }\r\n\r\n  // onReset은 어차피 인자를 넘겨주지 않아도 되므로 따로 멤버 변수 미생성\r\n\r\n  render() {\r\n    console.log(\"Habits\")\r\n\r\n    return (\r\n      <>\r\n        <HabitAddForm onAdd={this.handleAdd} />\r\n        <ul>\r\n          {this.props.habits.map((habit) => {\r\n            // 각각의 컴포넌트에 id를 부여해야함\r\n            // 자식의 컴포넌트가 어떤 것이 바뀌었는지 알게되면\r\n            // 렌더링 등 좋기 때문에?? 해야한다. => 자세히 알아보기\r\n            // 배열의 인덱스를 사용하면 안됨..\r\n            return (\r\n              <Habit\r\n                key={habit.id}\r\n                habit={habit}\r\n                onIncrement={this.handleIncrement}\r\n                onDecrement={this.handleDecrement}\r\n                onDelete={this.handleDelete}\r\n              />\r\n            )\r\n          })}\r\n        </ul>\r\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\r\n          Reset All\r\n        </button>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\"\r\n\r\nexport default class Navbar extends PureComponent {\r\n  render() {\r\n    console.log(\"Navbar\")\r\n\r\n    return (\r\n      <div className=\"navbar\">\r\n        <i className=\"navbar-logo fas fa-leaf\"></i>\r\n        <span>Habit Tracker</span>\r\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\nimport \"./App.css\"\nimport Habits from \"./components/Habits\"\nimport Navbar from \"./components/Navbar\"\n\nexport default class App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Running\", count: 0 },\n      { id: 3, name: \"Coding\", count: 0 },\n    ],\n  }\n  // state (data)는 가장 상위인 여기 App 컴포넌트에 놓았다.\n  // 때문에 여기서만 state를 수정할 수 있고\n  // state를 수정할 수 있는 함수들도 여기서 정의하여\n  // 인자들은 props로 넘겨준 그 하위 컴포넌트들에서 받아와서 수정한다.\n\n  handleIncrement = (habit) => {\n    // react에서 제공하는 setState 함수를 사용함으로써\n    // react가 해당 state가 변경이 되었는지 안되었는지 알 수 있도록 한다.\n    // this.setState({ count: this.state.habits.count + 1 })\n\n    // 내가 구현\n    // 이렇게 하는 것이 맞다.\n    const newHabits = this.state.habits.map((el) => {\n      return habit.id === el.id ? { ...habit, count: habit.count + 1 } : el\n    })\n    this.setState({ habits: newHabits })\n\n    // 엘리 - 안좋은 코드. 오브젝트 안에 작은 데이터만 변경하는 것은\n    // shallow comparison을 하는 react로서 그렇게 좋은 것이 아니다.\n    // 따라서 전체 오브젝트를 업데이트?해주어야한다. ===========\n    // const habits = [...this.state.habits]\n    // const index = habits.indexOf(habit) // index 확인\n    // habits[index].count++ // 이것도 state를 직접 수정하는 것임 => 이러면 위험함, 수정해야함!***\n    // this.setState({ habits }) // {habits: habits}이거와 같음\n  }\n\n  handleDecrement = (habit) => {\n    // 이렇게 쓸 수 있으나\n    // if (this.state.count > 0) {\n    //   this.setState({ count: this.state.count - 1 })\n    // }\n    // 삼항연산자로 하자\n    // const count = this.state.habits.count - 1\n    // this.setState({ count: count < 0 ? 0 : count })\n\n    // 내가 구현\n    const newHabits = this.state.habits.map((el) => {\n      return habit.id === el.id ? { ...habit, count: habit.count - 1 < 0 ? 0 : habit.count - 1 } : el\n    })\n    this.setState({ habits: newHabits })\n\n    // 엘리\n    // const habits = [...this.state.habits]\n    // const index = habits.indexOf(habit)\n    // const count = habits[index].count - 1\n    // habits[index].count = count < 0 ? 0 : count // 이것도 state를 직접 수정하는 것임\n    // this.setState({ habits })\n  }\n\n  handleDelete = (habit) => {\n    // 내가 구현\n    // const newHabits = this.state.habits.filter((el) => habit.id !== el.id)\n    // this.setState({ habits: newHabits })\n\n    // 엘리\n    const habits = this.state.habits.filter((item) => habit.id !== item.id)\n    this.setState({ habits })\n  }\n\n  // 추가\n  handleAdd = (name) => {\n    // {id:Date.now(),name, count: 0}\n    // 고유한 id(ms까지 포함되는 시간)이 포함된 객체를 habits 배열에 추가\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }]\n    this.setState({ habits })\n  }\n\n  // reset all\n  handleReset = () => {\n    // const habits = this.state.habits.map((habit) => {\n    //   habit.count = 0\n    //   return habit\n    // })\n    // 불필요한 render 방지\n    const habits = this.state.habits.map((habit) => {\n      // 이미 0이 아니라면 업데이트 할 필요 없음\n      if (habit.count !== 0) return { ...habit, count: 0 }\n      return habit\n    })\n    this.setState({ habits })\n  }\n\n  render() {\n    console.log(\"App\")\n    return (\n      <>\n        <Navbar totalCount={this.state.habits.filter((item) => item.count > 0).length} />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    )\n  }\n}\n\n// JSX란\n// javascript 요소인데 html요소 같이 생김!??\n// 그것을 JSX라고 부름\n// 자바스크립트 코드 위에서 html 요소 처럼 사용할 수 있게 만든 것\n\n// HTML과 JSX 차이\n// html 요소는 class / jsx 는 className\n// html 에서는 onclick / jsx는 onClick\n// html은 마크업 언어, jsx는 엄밀히 말하면 자바스크립트 언어이다\n// 따라서 jsx는 비즈니스 로직(중괄호를 이용해서 변수 등을 나타낼 수 있다), 자바스크립트 코드를 사용할 수 있다\n// 나중에 바벨이 jsx를 변환해주는 것이다.\n// jsx는 형제 노드를 가질 수 없다.\n// 한 가지 노드로만 감싸져야 한다. (그냥 묶어줄 때는 div 태그 남발하지 말고 그냥 프래그먼트<></> 사용하기)\n\n// 만약, 브라우저에서 요소를 확인했을 때,\n// 동작할 때 DOM 요소가 엄청 많이 변한다 => 매우 잘못하고 있는 것!\n// VDOM이 있으므로 바뀐 부분만 렌더가 되어야 하는데\n// 잘못짜서 실제 돔 요소가 많이 바뀌는 것일 수 있음\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n\n// react dom은 가장 상위에 있는 component를 root id를 가지는 요소에 넣어주는 (연결해주는) 라이브러리\nReactDOM.render(\n  // strick mode 사용하여 잘못하거나 위험한 상황에서 에러메세지 띄움\n  // 배포 버전에서는 나오지 않음\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}